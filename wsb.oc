

format elfobj64

include "wsb.oh"

value sync_src=NULL
value sync_dest=NULL
value starting_dir=NULL

charx sync_dest_data#MAX_PATH

importx "_puts" puts
importx "_fclose" fclose
importx "_strlen" strlen

function log_file()
    valuexu file#1
    return #file
endfunction
vstr log_location=".wsb.log"
function log_open()
    sv file_store
    setcall file_store log_file()
    sd file
    setcall file file_open(main.log_location,"wb")
    set file_store# file
endfunction
function log_set(ss pre_text,ss text)
    sv file_store
    setcall file_store log_file()
    sd sz
    setcall sz strlen(pre_text)
    call file_write(file_store#,pre_text,sz)
    setcall sz strlen(text)
    call file_write(file_store#,text,sz)
    char nl={0xd,0xa}
    call file_write(file_store#,#nl,2)
endfunction
function log_close()
    sv file_store
    setcall file_store log_file()
    call fclose(file_store#)
endfunction

const template_data_size=3*:

function templates()
    #stored templates: mem,first_part_size,rest_of_size;.....0
    value opened_templates#template_data_size*10
    return #opened_templates
endfunction

importx "_free" free

function texter(ss msg)
	call puts(msg)
	if main.starting_dir!=(NULL)
		call free(main.starting_dir)
	end
	importx "_exit" exit
	call exit(1)
endfunction

importx "_sprintf" sprintf

#file
function file_open(ss filepath,ss method)
    importx "_fopen" fopen
    sd file
    setcall file fopen(filepath,method)
    If file=0
        charx info#20+MAX_PATH
        char *=0
        call sprintf(#info,"Cannot open a file: %s",filepath)
#                           12345678901234567890
        call texter(#info)
    EndIf
    return file
endfunction
function file_seek(ss file,sd off,sd method)
    importx "_fseek" fseek
    sd seekint
    setcall seekint fseek(file,off,method)
    If seekint!=0
        vstr seekerr="File seek error"
        call texter(seekerr)
    endif
endfunction
#sz
function file_tell(sd file)
    importx "_ftell" ftell
    sd sz
    setcall sz ftell(file)
    if sz=-1
        vstr ftellerr="File tell error"
        call texter(ftellerr)
    endif
    return sz
endfunction
#file
function file_open_dest(sd filename,sv pfile2)
	sd verify_size
	set verify_size strlen(filename)
	sd file
	setcall file file_open_folders_between(filename,verify_size,verify_size)
	if main.sync_dest!=(NULL)
		sd out_sync_path
		sd sizefull
		set out_sync_path common_path_ex(main.sync_dest,filename,#sizefull)
		set pfile2# file_open_folders_between(out_sync_path,sizefull,verify_size)
	else
		set pfile2# (NULL)
	end
	return file
end

#mem
function memalloc(sd sz)
    importx "_malloc" malloc
    sd mem
    SetCall mem malloc(sz)
    If mem=0
        vstr newmem="Malloc failed"
        call texter(newmem)
    endif
    return mem
EndFunction
function file_read(sd file,sd mem,sd size)
    importx "_fread" fread
    sd read
    setcall read fread(mem,1,size,file)
    if read!=size
        vstr er="Read length is different or error"
        call texter(er)
    endif
endfunction

function file_write(sd file,sd buffer,sd size)
    if size=0
        ret
    endif
    importx "_fwrite" fwrite
    sd len
    setcall len fwrite(buffer,1,size,file)
    if len!=0
        ret
    endif
    vstr er="File write error"
    call texter(er)
endfunction
function file_write_duo(sd file,sd buffer,sd size,sd file2)
	call file_write(file,buffer,size)
	if file2!=(NULL)
		call file_write(file2,buffer,size)
	end
endfunction

#pos where the string is in mem
function str_in_mem(ss str,ss mem,sd len)
    ss err
    sd pos
    setcall pos string_in_mem(str,mem,len,#err)
    if err!=0
        call texter(err)
    endif
    return pos
endfunction
#bool
function str_in_mem_bool(ss str,ss mem,sd len,sv p_pos)
    ss err
    setcall p_pos# string_in_mem(str,mem,len,#err)
    if err!=0
        return (FALSE)
    endif
    return (TRUE)
endfunction

importx "_memcmp" memcmp
#pos where the string is in mem/or all size
function string_in_mem(ss str,ss mem,sd len,sv p_err)
    set p_err# 0
    sd sz
    setcall sz strlen(str)
    if sz>len
        set p_err# "string is greater than mem"
        return len
    endif
    sd lastgood
    set lastgood len
    sub lastgood sz
    sd i=0
    while i<=lastgood
        sd compare
        setcall compare memcmp(mem,str,sz)
        if compare=0
            return i
        endif
        inc mem
        inc i
    endwhile
    set p_err# "string not found in mem"
    return len
endfunction

importx "_chdir" chdir
importx "_access" access
importx "_mkdir" mkdir

function dir_make(ss value)
	datax int#1;set int access(value,(F_OK))
	if int=-1
		setcall int mkdir(value,0700)
		if int!=0
			call texter("Mkdir error")
		endif
	end
end

function dirch_simple(ss value)
	datax change#1
	setcall change chdir(value)
	if change!=0
#        importx "__get_errno" get_errno
#        sd err
#        call get_errno(#err)
#        if err!=(ENOENT)
#            call texter("Change dir error")
#        endif
		call texter("chdir error")
	endif
end

function dirch_nolog(ss value)
	call dir_make(value)
	call dirch_simple(value)
endfunction

function dirch(ss value)
    call dirch_nolog(value)
    call log_set("D ",value)
endfunction

#memcmp/2
function str_compare(ss str1,ss str2)
    sd sz1
    sd sz2
    setcall sz1 strlen(str1)
    setcall sz2 strlen(str2)
    if sz1!=sz2
        return 2
    endif
    sd compare
    setcall compare memcmp(str1,str2,sz1)
    return compare
endfunction

#filename/0
function loop(ss name,ss p_is_template)
    vstr back=".."
    sd compare
    setcall compare str_compare(back,name)
    if compare=0
        #is back one folder

        call dirch(back)
	if main.sync_dest!=(NULL)
		call sync_dest_dir_minus()
	end

        return 0
    endif
    vstr template_end="!"
    setcall compare str_compare(template_end,name)
    if compare=0
        #is template end
        sv templates_data
        setcall templates_data templates()
        sv containers_data
        set containers_data templates_data
        while templates_data#!=0
            add templates_data (template_data_size)
        endwhile
        if templates_data=containers_data
            call texter("error with the templates end")
        endif
        sub templates_data (template_data_size)
        call free(templates_data#)
        set templates_data# 0
        return 0
    endif
    #
    set p_is_template# 0
    ss cursor
    set cursor name
    while cursor#!=0
        char dot="."
        if cursor#=dot
            inc cursor
            sd len
            sd len2
            setcall len2 strlen(cursor)
            #
            vstr dir_nm="dir"
            setcall len strlen(dir_nm)
            if len=len2
                setcall compare memcmp(cursor,dir_nm,len)
                if compare=0
                    #is a folder name, and the file is index.php from inside the folder
                    dec cursor
                    set cursor# 0

                    call dirch(name)
			if main.sync_dest!=(NULL)
				call sync_dest_dir_plus(name)
			end

                    set cursor# dot    ##will be index.php in dest and get name.dir file from src
                    return "index.php"
                endif
                #is a file 1
                return name
            endif
            vstr tmpl="container"
            setcall len strlen(tmpl)
            if len=len2
                setcall compare memcmp(cursor,tmpl,len)
                if compare=0
                    #is container
                    set p_is_template# 1
                endif
            endif
            #is a file 2
            return name
        endif
        inc cursor
    endwhile
    #is a file 3
    return name
endfunction
#filepath
function common_path_ex(sd dirname,sd basename,sv psize)
    charx path#MAX_PATH
    #
    sd sz
    setcall sz strlen(dirname)
    #
    addcall sz strlen(basename)
    if sz>=^(MAX_PATH_withoutNul)
        call texter("error data_open")
    endif
    call sprintf(#path,"%s%s",dirname,basename)
	if psize!=(NULL)
		set psize# sz    ##in most of the cases strlen is required outside
	end
    return #path
end
#filepath
function common_path(sd dirname,sd basename)
	sd p;setcall p common_path_ex(dirname,basename,(NULL))
	return p
end
#filepath
function src_path(ss filename)
	sd src
	setcall src src_folder()
	sd p;set p common_path(src,filename)
	return p
endfunction
#file
function src_open(ss filename)
    ss path
    setcall path src_path(filename)
    sd file
    setcall file file_open(path,"rb")
    return file
endfunction

function template_string()
    char template="<!-- -->"
    return #template
endfunction
function template_string_length()
    ss t_str
    setcall t_str template_string()
    sd sz
    setcall sz strlen(t_str)
    return sz
endfunction

function src_get_template(ss filename,sv containers)
    sd file
    setcall file src_open(filename)
    call file_seek(file,0,(SEEK_END))
    sd len
    setcall len file_tell(file)
    call file_seek(file,0,(SEEK_SET))
    sd mem
    setcall mem memalloc(len)
    call file_read(file,mem,len)
    call fclose(file)

	call sync_src_fn(filename,mem,len)

    sv t_cursor
    set t_cursor containers
    while t_cursor#!=0
        add t_cursor (template_data_size)
    endwhile
    set t_cursor# mem
    add t_cursor :

    ss t_str
    setcall t_str template_string()
    sd pos
    setcall pos str_in_mem(t_str,mem,len)
    sd sz
    setcall sz strlen(t_str)
    sub len pos
    sub len sz
    set t_cursor# pos
    add t_cursor :
    set t_cursor# len
    add t_cursor :

    set t_cursor# 0
endfunction

#mem
function file_get_content_ex(ss filename,sv p_len,sd add)
    sd file
    setcall file file_open(filename,"rb")
    call file_seek(file,0,(SEEK_END))
    sd len
    setcall len file_tell(file)
    call file_seek(file,0,(SEEK_SET))
    sd mem
	add len add
    setcall mem memalloc(len)
	sub len add
    call file_read(file,mem,len)
    call fclose(file)
    set p_len# len
    return mem
endfunction

function p_dest_folder()
    valuexu p#1
    return #p
endfunction
function dest_folder()
    sv p;setcall p p_dest_folder()
    return p#
endfunction

function p_src_folder()
    valuexu p#1
    return #p
endfunction
function src_folder()
    sv p;setcall p p_src_folder()
    return p#
endfunction

#                123456
const files_size=999999
function files_pointer()
    charx files#files_size
    return #files
endfunction
function files_set(ss mem,sd size)
    ss files_size=0
    ss entry
    sd nl=0
    set entry mem
    while size!=0
        if mem#=0xd
            set mem# 0
            set nl 1
        elseif mem#=0xa
            set mem# 0
            set nl 1
        elseif nl=1
            addcall files_size files_set_value(entry,files_size)
            set entry mem
            set nl 0
        endelseif
        inc mem
        dec size
    endwhile
    if nl=1
        addcall files_size files_set_value(entry,files_size)
	else
		inc mem     ##is safe, this mem was +1 alloc'ed
		set mem# 0
		addcall files_size files_set_value(entry,files_size)
	end
    if files_size=(files_size)
        call texter("size limit at last char at files error")
    endif
    ss files
    setcall files files_pointer()
    add files files_size
    set files# 0      #this was for a long time. since sync dest, strlen the plus folder
endfunction
function files_set_value(ss new_data,sd pos)
	sd new_len
	setcall new_len strlen(new_data)
	while new_len!=0
		if new_data#=0x9
			inc new_data
		elseif new_data#=0x20
			inc new_data
		else
			break
		endelse
		dec new_len
	endwhile
	if new_len!=0  #just tabs/spaces on this row if not
		if new_data#!=(asciinumber) ##a comment row
			sd files
			setcall files files_pointer()
			add files pos
			add pos new_len
			if pos>(files_size)
				call texter("size limit at files error")
			endif
			inc new_len
			call memcpy(files,new_data,new_len)
			return new_len
		end
	end
	return 0
endfunction

#true if match or false
Function filepathdelims(ss str)
	If str#=(asciibackslash)
                Return (TRUE)
        EndIf
	If str#=(asciislash)
                Return (TRUE)
        EndIf
        Return (FALSE)
EndFunction

function replacements(sv p_cursor,sd file_out,sd file_out_sync)
    ss entry_mem
    sd entry_len
    ss file_srcpath
    setcall file_srcpath src_path(p_cursor#)
    setcall entry_mem file_get_content_ex(file_srcpath,#entry_len,0)

	call sync_src_fn(p_cursor#,entry_mem,entry_len)

    ss entry_start
    set entry_start entry_mem
    ss t_str
    setcall t_str template_string()
    sd pos
    sd bool=1
    while bool=1
        setcall bool str_in_mem_bool(t_str,entry_mem,entry_len,#pos)
        call file_write_duo(file_out,entry_mem,pos,file_out_sync)
        if bool=1
            addcall p_cursor# strlen(p_cursor#)
            inc p_cursor#

            #recursive call; the replacement can have it's own replacements
            call replacements(p_cursor,file_out,file_out_sync)

            #advance to the next piece to write
            add entry_mem pos
            sub entry_len pos
            sd inter_sz
            setcall inter_sz strlen(t_str)
            add entry_mem inter_sz
            sub entry_len inter_sz
        endif
    endwhile
    call free(entry_start)
endfunction

#cursor
function get_src_dest(ss cursor,sv p_line)
    if cursor#=0
        call texter("src/dest files expected")
    endif
    set p_line# cursor
    while cursor#!=0
        inc cursor
    endwhile
	#it's ok, comments and new lines are out already, and last line has 0
	inc cursor
    return cursor
endfunction

#cursor
function get_alt(ss cursor)
#0 at new lines was analyzed before
	ss start
	set start cursor
	if cursor#=(asciislash)
		inc cursor
		if cursor#=(asciislash)
			#set sync src
			inc cursor
			set main.sync_src cursor
		elseif cursor#=(asciibackslash)
			#set sync dest
			inc cursor
			set main.sync_dest cursor
		else
			return start
		end
		while cursor#!=0
			inc cursor
		end
		inc cursor
		return cursor
	end
	return start
end

function sync_dest_dir_plus(sd plus)
	sd sz
	set sz strlen(main.sync_dest)
	sd szplus
	set szplus strlen(plus)

	ss from
	set from sz
	add from main.sync_dest
	add sz szplus
	if sz<^(MAX_PATH_withoutNul+1)  ##+1 for slash, btw will error later if at max here
		call memcpy(from,plus,szplus)
		add from szplus
		set from# (asciislash)
		inc from
		set from# (asciinul)
		call dir_make(main.sync_dest)
		ret
	end
	call texter("error at sync dest")
end
function sync_dest_dir_minus()
	ss c;set c strlen(main.sync_dest)
	add c main.sync_dest
	dec c   ##was a plus/ (is a slash at end)
	while c!=main.sync_dest   ##can .. anytime and infinite loop here
		dec c
		if c#=(asciislash)
			inc c
			set c# (asciinul)
			ret
		end
	end
	set c# (asciinul)  #only when sync'ing in "" folder
end

#file
function file_open_folders_between(ss filename,sd bigsize,ss smallsize)
	add bigsize filename
	neg smallsize
	add smallsize bigsize
	while smallsize!=bigsize
		inc smallsize   ##ignoring if is in first place? mkdir("/")?
		sd b;set b filepathdelims(smallsize)
		if b=(TRUE)
			set smallsize# (asciinul)
			call dir_make(filename)
			set smallsize# (asciislash)
		end
	end
	sd file
	setcall file file_open(filename,"wb")
	return file
end

function sync_src_fn(ss filename,sd mem,sd len)
	if main.sync_src!=(NULL)
	#at src file is user fullpath
		sd folders_verify_size
		set folders_verify_size strlen(filename)
		sd sizefull
		sd p;set p common_path_ex(main.sync_src,filename,#sizefull)
		sd file
		setcall file file_open_folders_between(p,sizefull,folders_verify_size)
		call file_write(file,mem,len)
		call fclose(file)
	end
end

function usage()
	call texter("USAGE: wstbld file
or:        f file
           --remove-log
           --help")
end

importx "_strcmp" strcmp
importx "_unlink" unlink
importx "_getchar" getchar
importx "_printf" printf

function command_line(sd argc,sv argv)
	ss test;set test argv#
	if test#=(asciif)
		inc test
		if test#=(asciinul)
			incst argv
			dec argc
		end
	end
	if argc!=2
		call usage()
	end
	sd c;set c strcmp(argv#,"--help")
	if c=0
		call usage()
	end
	set c strcmp(argv#,"--remove-log")
	if c=0
		ss from;set from to_home()
		sd a;set a access(main.log_location,(F_OK))
		if a=0
			if from=(NULL)
				set from "."
			end
			call printf("Would remove: \"%s\" from \"%s\". yes ? ",main.log_location,from)
			sd e;set e getchar()
			if e=(asciiy)
				call unlink(main.log_location)
			else
				call puts("expecting \"y\"")
			end
		end
		call exit(0)
	end
	return argv
end

function to_home()
	importx "_getenv" getenv
	sd e
	set e getenv("HOME")
	if e!=(NULL)
		call dirch_simple(e)
	else #command prompt
		set e getenv("HOMEDRIVE")
		if e!=(NULL)
			call dirch_simple(e)  #msys build will not do this/only mingw, anyway they are working at HOME
			set e getenv("HOMEPATH")
			if e!=(NULL)
				call dirch_simple(e)
			else
				vstr home_e="home error"
				call texter(home_e)
			end
		end
	end
	return e
end

include "win.oc" "lin.oc"

if argc<2
	call usage()
endif

incst argv
set argv command_line(argc,argv)

sd mem_main
sd len
setcall mem_main file_get_content_ex(argv#,#len,1)
call files_set(mem_main,len)
call free(mem_main)

ss cursor
setcall cursor files_pointer()

sv p_src;setcall p_src p_src_folder()
setcall cursor get_src_dest(cursor,p_src)
sv p_dest;setcall p_dest p_dest_folder()
setcall cursor get_src_dest(cursor,p_dest)
sd tmp
set tmp cursor
setcall cursor get_alt(cursor)
if tmp!=cursor
	setcall cursor get_alt(cursor)
end

if sync_dest!=(NULL)
	#this path will follow dest chdirs too
	sd ds_len
	set ds_len strlen(sync_dest)
	inc ds_len
	if ds_len>^(MAX_PATH)
		call texter("sync dest big size")
	end
	importx "_memcpy" memcpy
	call memcpy(#sync_dest_data,sync_dest,ds_len)
	set sync_dest #sync_dest_data
end

#log file
#store current folder to come back
importx "_getcwd" getcwd
set starting_dir getcwd((NULL),0)
#
call to_home()
call log_open()
call dirch_simple(starting_dir)

ss root
setcall root dest_folder()
call dirch(root)

sv templates_data
setcall templates_data templates()
charx is_template#1
set templates_data# 0
while cursor#!=0
    ss filename
    setcall filename loop(cursor,#is_template)
    if filename!=0
        if is_template=1
            call src_get_template(cursor,templates_data)
        else
            sv t_cursor
            ss mem
            sd sz
            call log_set("F ",filename)
            sd file;sv file_sync
            setcall file file_open_dest(filename,#file_sync)
            #
            set t_cursor templates_data
            sd t_start
            set t_start t_cursor
            while t_cursor#!=0
                set mem t_cursor#
                add t_cursor :
                set sz t_cursor#
                add t_cursor :
                add t_cursor :
                call file_write_duo(file,mem,sz,file_sync)
            endwhile
            #write main
            #look for forward replacements
            call replacements(#cursor,file,file_sync)
            #
            while t_cursor!=t_start
                sub t_cursor :
                set sz t_cursor#
                sub t_cursor :
                sd prev_sz
                set prev_sz t_cursor#
                sub t_cursor :
                set mem t_cursor#
                add mem prev_sz
                addcall mem template_string_length()
                call file_write_duo(file,mem,sz,file_sync)
            endwhile
		call fclose(file)  #on linux is important
		if file_sync!=(NULL)
			call fclose(file_sync)
		end
        endelse
    endif
    addcall cursor strlen(cursor)
    inc cursor
endwhile
call log_close()
call exit(0)
#return 0 is ok but at cross on arm and with qemu, is not knowing
